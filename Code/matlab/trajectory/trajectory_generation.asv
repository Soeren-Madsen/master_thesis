clear; clc;
format compact;

%General parameters:
t0=0;
freq = 1;

%Drone parameters:
z_t0 = 50;
z_dot_t0 = 0;

%Platform parameters:
zd_hat = zd(t0,freq);
zd_dot_hat = zd_dot(t0,freq);

%Trajectory time calculation:
zrmax_ddot = 6;
zrmax_dot = 10;
za = z_t0 - zd_hat;
za_dot = z_dot_t0 - zd_dot(t0,freq);
za_tau = 1;
syms tau;

%calculation loop:
t = t0;
dt = 0.1;
z_ref = z_t0;
zd_vec = zd_hat;
za_ddot_plot = 0;
while t < 8
    eqn = za_dot + zrmax_ddot*(tau-t)-zd_dot(tau,freq)+zd_dot(t,freq) == 0;
    tf = vpasolve(eqn);
    t
    za_tau = za + za_dot*(tf-t)+1/2*zrmax_ddot*(tf-t)^2-zd(tf,freq)+zd(t,freq)+zd_dot(t,freq)*(tf-t);
    za_dot_tau = za_dot+ zrmax_ddot*(tf-t)-zd_dot(tf,freq)+zd_dot(t,freq);
    
    if za_tau <= 0.1 %Break
        za_ddot =  zrmax_ddot - zd_ddot(t,freq);
        1
    elseif za_tau > 0
        if za_dot <= -zrmax_dot - zd_dot(t,freq)
            za_ddot = -zd_ddot(t,freq);
            2
        else
            za_ddot =  -zrmax_ddot - zd_ddot(t,freq);
            3
        end
    end
    t=t+dt;
    za_dot = za_dot+ za_ddot*dt;
    za=za + za_dot*dt+1/2*za_ddot*dt^2;
    
    zd_vec = [zd_vec, zd(t,freq)];
    zr = za-zd(t,freq);
    z_ref = [z_ref, za-zd(t,freq)];
    za_ddot_plot = [za_ddot_plot, za_ddot]
end

plot(z_ref);
hold on;
plot(zd_vec);


